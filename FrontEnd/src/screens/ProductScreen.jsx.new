import { useParams } from "react-router-dom";
import { useState } from "react";
import { Link } from "react-router-dom";
import { useSelector } from "react-redux";
import {
  Box,
  Grid,
  Typography,
  Paper,
  Divider,
  TextField,
  CircularProgress,
  Alert,
  MenuItem,
} from "@mui/material";
import ArrowBackIcon from "@mui/icons-material/ArrowBack";
import Rating from "../components/Rating";
import {
  useGetProductDetailsQuery,
  useCreateReviewMutation,
} from "../slices/productsApiSlice";
import { useAddToCartMutation } from "../slices/cartApiSlice";
import { toast } from "react-toastify";
import QuantitySelector from "../components/QuantitySelector";
import Button from "../components/ui/Button";

const ProductScreen = () => {
  const { id: productId } = useParams();
  const [qty, setQty] = useState(1);
  const [rating, setRating] = useState(0);
  const [comment, setComment] = useState("");

  const {
    data: product,
    isLoading,
    refetch,
    error,
  } = useGetProductDetailsQuery(productId);

  const [createReview, { isLoading: isReviewLoading }] = useCreateReviewMutation();
  const { userInfo } = useSelector((state) => state.auth);
  const [addToCart] = useAddToCartMutation();

  const addToCartHandler = async () => {
    try {
      await addToCart({ book_id: product.id, quantity: qty }).unwrap();
      toast.success("Added to Cart");
    } catch (err) {
      toast.error("Failed to add to cart");
    }
  };

  const submitHandler = async (e) => {
    e.preventDefault();
    try {
      await createReview({
        productId,
        rating,
        comment,
      }).unwrap();
      refetch();
      toast.success("Review Submitted");
      setRating(0);
      setComment("");
    } catch (err) {
      toast.error(err?.data?.message || "Failed to submit review");
    }
  };

  return (
    <Box sx={{ pb: 8 }}>
      <Button
        component={Link}
        to="/"
        variant="text"
        sx={{ mb: 4 }}
        startIcon={<ArrowBackIcon />}
      >
        Back to Books
      </Button>

      {isLoading ? (
        <Box display="flex" justifyContent="center" p={4}>
          <CircularProgress />
        </Box>
      ) : error ? (
        <Alert severity="error" sx={{ mb: 4 }}>
          {error?.data?.message || error.error}
        </Alert>
      ) : (
        <>
          <Grid container spacing={4}>
            <Grid item xs={12} md={5}>
              <Paper 
                elevation={0} 
                sx={{ 
                  p: 2,
                  borderRadius: 2,
                  overflow: 'hidden',
                  border: '1px solid',
                  borderColor: 'divider'
                }}
              >
                <Box
                  component="img"
                  src={product.image}
                  alt={product.title}
                  sx={{
                    width: '100%',
                    height: 'auto',
                    objectFit: 'contain',
                    maxHeight: '500px',
                    borderRadius: 1
                  }}
                />
              </Paper>
            </Grid>

            <Grid item xs={12} md={7}>
              <Paper 
                elevation={0} 
                sx={{ 
                  p: 3,
                  borderRadius: 2,
                  border: '1px solid',
                  borderColor: 'divider'
                }}
              >
                <Box>
                  <Typography variant="h4" component="h1" gutterBottom fontWeight="500">
                    {product.title}
                  </Typography>

                  <Box sx={{ my: 2 }}>
                    <Rating
                      value={product.star}
                      text={`${product.review_count} reviews`}
                    />
                  </Box>

                  <Typography variant="h5" color="primary" sx={{ fontWeight: 600, my: 2 }}>
                    ${product.price}
                  </Typography>

                  <Divider sx={{ my: 3 }} />

                  <Typography variant="body1" paragraph>
                    {product.description}
                  </Typography>

                  <Box sx={{ mt: 2, mb: 3 }}>
                    <Typography variant="subtitle1" fontWeight="600" gutterBottom>
                      Authors:
                    </Typography>
                    <Typography variant="body1" color="text.secondary">
                      {product.authors && product.authors.length > 0
                        ? product.authors.join(", ")
                        : "N/A"}
                    </Typography>
                  </Box>

                  <Box sx={{ mb: 3 }}>
                    <Typography variant="subtitle1" fontWeight="600" gutterBottom>
                      Categories:
                    </Typography>
                    <Typography variant="body1" color="text.secondary">
                      {product.categories && product.categories.length > 0
                        ? product.categories.join(", ")
                        : "N/A"}
                    </Typography>
                  </Box>

                  <Box sx={{ mb: 3 }}>
                    <Typography variant="subtitle1" fontWeight="600" gutterBottom>
                      Publisher:
                    </Typography>
                    <Typography variant="body1" color="text.secondary">
                      {product.publication || "N/A"}
                    </Typography>
                  </Box>

                  <Divider sx={{ my: 3 }} />

                  <Box sx={{ mt: 3 }}>
                    <Grid container spacing={2} alignItems="center">
                      <Grid item xs={6}>
                        <Typography variant="subtitle1">Stock:</Typography>
                      </Grid>
                      <Grid item xs={6}>
                        <Typography 
                          variant="subtitle1" 
                          color={product.stock > 0 ? "success.main" : "error.main"}
                          fontWeight="600"
                        >
                          {product.stock > 0 ? "In Stock" : "Out of Stock"}
                        </Typography>
                      </Grid>
                    </Grid>

                    {product.stock > 0 && (
                      <Box sx={{ mt: 3 }}>
                        <Grid container spacing={2} alignItems="center">
                          <Grid item xs={5}>
                            <Typography variant="subtitle1">Quantity:</Typography>
                          </Grid>
                          <Grid item xs={7}>
                            <QuantitySelector
                              qty={qty}
                              setQty={setQty}
                              stock={product.stock}
                            />
                          </Grid>
                        </Grid>
                      </Box>
                    )}

                    <Box sx={{ mt: 4 }}>
                      <Button
                        fullWidth
                        disabled={product.stock <= 0}
                        onClick={addToCartHandler}
                        size="large"
                      >
                        Add To Cart
                      </Button>
                    </Box>
                  </Box>
                </Box>
              </Paper>
            </Grid>
          </Grid>

          {/* Reviews Section */}
          <Grid container sx={{ mt: 6 }} spacing={4}>
            <Grid item xs={12} md={8}>
              <Paper 
                elevation={0} 
                sx={{ 
                  p: 3,
                  borderRadius: 2,
                  border: '1px solid',
                  borderColor: 'divider'
                }}
              >
                <Typography variant="h5" gutterBottom>
                  Reviews
                </Typography>
                
                {product.reviews?.length === 0 ? (
                  <Alert severity="info">No Reviews Yet</Alert>
                ) : (
                  <Box sx={{ mt: 2 }}>
                    {product.reviews.map((review) => (
                      <Box 
                        key={review.id} 
                        sx={{ 
                          py: 2,
                          '&:not(:last-child)': {
                            borderBottom: '1px solid',
                            borderColor: 'divider'
                          }
                        }}
                      >
                        <Typography variant="subtitle1" fontWeight="600">
                          {review.user_name}
                        </Typography>
                        <Rating value={review.rating} />
                        <Typography variant="body2" color="text.secondary" sx={{ my: 1 }}>
                          {review.review_date.substring(0, 10)}
                        </Typography>
                        <Typography variant="body1">
                          {review.comment}
                        </Typography>
                      </Box>
                    ))}
                  </Box>
                )}

                <Box sx={{ mt: 4 }}>
                  <Typography variant="h6" gutterBottom>
                    Write a Review
                  </Typography>
                  
                  {isReviewLoading ? (
                    <Box display="flex" justifyContent="center" p={2}>
                      <CircularProgress />
                    </Box>
                  ) : userInfo ? (
                    <form onSubmit={submitHandler}>
                      <TextField
                        select
                        fullWidth
                        label="Rating"
                        value={rating}
                        onChange={(e) => setRating(Number(e.target.value))}
                        sx={{ mb: 2 }}
                      >
                        <MenuItem value="">Select...</MenuItem>
                        <MenuItem value="1">1 - Poor</MenuItem>
                        <MenuItem value="2">2 - Fair</MenuItem>
                        <MenuItem value="3">3 - Good</MenuItem>
                        <MenuItem value="4">4 - Very Good</MenuItem>
                        <MenuItem value="5">5 - Excellent</MenuItem>
                      </TextField>

                      <TextField
                        fullWidth
                        multiline
                        rows={3}
                        label="Comment"
                        value={comment}
                        onChange={(e) => setComment(e.target.value)}
                        sx={{ mb: 3 }}
                      />

                      <Button
                        type="submit"
                        disabled={isReviewLoading}
                        size="large"
                      >
                        Submit Review
                      </Button>
                    </form>
                  ) : (
                    <Alert severity="info" sx={{ mt: 2 }}>
                      Please <Link to="/login" style={{ color: 'inherit', textDecoration: 'underline' }}>sign in</Link> to write a review
                    </Alert>
                  )}
                </Box>
              </Paper>
            </Grid>
          </Grid>
        </>
      )}
    </Box>
  );
};

export default ProductScreen;
